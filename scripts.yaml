# Lights On
light_on:
  alias: Light - Turn On
  icon: "mdi:party-popper"
  description: 'Turns on the specified lights depending on time day'
  variables:
    # entity_id: light.tradfri_led_rgb_04_light
    brightness_high: 100
    brightness_mid: 50
    brightness_low: 1
    temp_cold: 250
    temp_mid: 350
    temp_warm: 450
    transition: 1
    col_cold: antiquewhite
    col_mid: navajowhite
    col_warm: sandybrown
  fields:
    entity_id:
      description: The Light to be turned on.
      example: light.livingroom
  mode: parallel
  sequence:
    - choose:
      - conditions:
        - condition: state
          entity_id: switch.ha_lights_mode_morning
          state: 'on'
        sequence:
        - service: script.light_on_worker
          data:
            entity_id: "{{ entity_id }}"
            brightness_pct: "{{ brightness_high }}"
            color_name: "{{ col_cold }}"
            color_temp: "{{ temp_cold }}"
            transition: "{{ transition }}"

      - conditions:
        - condition: state
          entity_id: switch.ha_lights_mode_afternoon
          state: 'on'
        sequence:
        - service: script.light_on_worker
          data:
            entity_id: "{{ entity_id }}"
            brightness_pct: "{{ brightness_high }}"
            color_name: "{{ col_mid }}"
            color_temp: "{{ temp_mid }}"
            transition: "{{ transition }}"

      - conditions:
        - condition: state
          entity_id: switch.ha_lights_mode_evening
          state: 'on'
        sequence:
        - service: script.light_on_worker
          data:
            entity_id: "{{ entity_id }}"
            brightness_pct: "{{ brightness_high }}"
            color_name: "{{ col_warm }}"
            color_temp: "{{ temp_mid }}"
            transition: "{{ transition }}"

      - conditions:
        - condition: state
          entity_id: switch.ha_lights_mode_night
          state: 'on'
        sequence:
        - service: script.light_on_worker
          data:
            entity_id: "{{ entity_id }}"
            brightness_pct: "{{ brightness_low }}"
            color_name: "{{ col_warm }}"
            color_temp: "{{ temp_warm }}"
            transition: "{{ transition }}"


light_on_worker:
  alias: Worker - Light On
  icon: mdi:lamp
  description: 'Worker to actually turn on the light'
  fields:
    entity_id:
      description: The Light to be turned on.
      example: light.tradfri_led_rgb_04_light
    brightness_pct:
      description: The brightness in percent [0 - 100]
      example: '100'
    color_name:
      description: The color in human readable format
      example: navajowhite
    color_temp:
      description: Colour temperature in mireds
      example: '250'
    transition:
      description: The transition time (in seconds)
      example: '1'
  mode: parallel
  sequence:
  - choose:
    - conditions: # Check for colour support
      - "{{ state_attr(entity_id, 'supported_features') | bitwise_and(16) == 16}}"
      sequence:
      - service: light.turn_on
        data:
          entity_id: "{{ entity_id }}"
          brightness_pct: 1
          color_name: "{{ color_name }}"
          transition: 0
    default:
    - service: light.turn_on
      data:
        entity_id: "{{ entity_id }}"
        brightness_pct: 1
        color_temp: "{{ color_temp }}"
        transition: 0
  - delay:
      milliseconds: 500
  - service: light.turn_on
    data:
      entity_id: "{{ entity_id }}"
      brightness_pct: "{{ brightness_pct }}"
      transition: "{{ transition }}"



# Lights change when already on
light_switch:
  alias: Light - Switch
  icon: "mdi:party-popper"
  description: 'Turns on the specified lights depending on time day'
  variables:
    # entity_id: light.tradfri_led_rgb_04_light
    brightness_high: 100
    brightness_mid: 50
    brightness_low: 1
    temp_cold: 250
    temp_mid: 350
    temp_warm: 450
    transition: 1
    col_cold: blanchedalmond
    col_mid: navajowhite
    col_warm: sandybrown
  fields:
    entity_id:
      description: The Light to be turned on.
      example: light.livingroom
  mode: queued
  sequence:
    - choose:
      - conditions:
        - condition: state
          entity_id: switch.ha_lights_mode_morning
          state: 'on'
        sequence:
        - service: script.light_switch_worker
          data:
            entity_id: "{{ entity_id }}"
            brightness_pct: "{{ brightness_high }}"
            color_name: "{{ col_cold }}"
            color_temp: "{{ temp_cold }}"
            transition: "{{ transition }}"

      - conditions:
        - condition: state
          entity_id: switch.ha_lights_mode_afternoon
          state: 'on'
        sequence:
        - service: script.light_switch_worker
          data:
            entity_id: "{{ entity_id }}"
            brightness_pct: "{{ brightness_high }}"
            color_name: "{{ col_mid }}"
            color_temp: "{{ temp_mid }}"
            transition: "{{ transition }}"

      - conditions:
        - condition: state
          entity_id: switch.ha_lights_mode_evening
          state: 'on'
        sequence:
        - service: script.light_switch_worker
          data:
            entity_id: "{{ entity_id }}"
            brightness_pct: "{{ brightness_high }}"
            color_name: "{{ col_warm }}"
            color_temp: "{{ temp_warm }}"
            transition: "{{ transition }}"

      - conditions:
        - condition: state
          entity_id: switch.ha_lights_mode_night
          state: 'on'
        sequence:
        - service: script.light_switch_worker
          data:
            entity_id: "{{ entity_id }}"
            brightness_pct: "{{ brightness_low }}"
            color_name: "{{ col_warm }}"
            color_temp: "{{ temp_warm }}"
            transition: "{{ transition }}"


light_switch_worker:
  alias: Worker - Light Switch
  icon: mdi:lamp
  description: 'Worker when light is already on'
  fields:
    entity_id:
      description: The Light to be turned switched.
      example: light.tradfri_led_rgb_04_light
    brightness_pct:
      description: The brightness in percent [0 - 100]
      example: '100'
    color_name:
      description: The color in human readable format
      example: navajowhite
    color_temp:
      description: Colour temperature in mireds
      example: '250'
    transition:
      description: The transition time (in seconds)
      example: '1'
  mode: parallel
  sequence:
  - choose:
    - conditions: # Check for colour support
      - "{{ state_attr(entity_id, 'supported_features') | bitwise_and(16) == 16}}"
      sequence:
      - service: light.turn_on
        data:
          entity_id: "{{ entity_id }}"
          color_name: "{{ color_name }}"
          transition: "{{ transition / 2}}"
    default:
    - service: light.turn_on
      data:
        entity_id: "{{ entity_id }}"
        color_temp: "{{ color_temp }}"
        transition: "{{ transition / 2}}"
  - delay:
      seconds: "{{ transition / 2}}"
      milliseconds: 500
  - service: light.turn_on
    data:
      entity_id: "{{ entity_id }}"
      brightness_pct: "{{ brightness_pct }}"
      transition: "{{ transition / 2}}"



# Lights Mode Change
light_mode_change:
  alias: Lights - Mode Change
  description: Change lights to new light mode
  mode: restart
  sequence:
  # - delay: 00:00:01
  - choose:
    - conditions:
      - condition: state
        entity_id: light.store
        state: 'on'
      sequence:
        - service: script.light_switch
          data:
            entity_id: light.store
  - choose:
    - conditions:
      - condition: state
        entity_id: light.bathroom
        state: 'on'
      sequence:
        - service: script.light_switch
          data:
            entity_id: light.bathroom
  - choose:
    - conditions:
      - condition: state
        entity_id: light.gallery
        state: 'on'
      sequence:
        - service: script.light_switch
          data:
            entity_id: light.gallery
  - choose:
    - conditions:
      - condition: state
        entity_id: light.kitchen
        state: 'on'
      sequence:
        - service: script.light_switch
          data:
            entity_id: light.kitchen
  - choose:
    - conditions:
      - condition: state
        entity_id: light.livingroom
        state: 'on'
      sequence:
        - service: script.light_switch
          data:
            entity_id: light.livingroom
  - choose:
    - conditions:
      - condition: state
        entity_id: light.bedroom_ceiling
        state: 'on'
      sequence:
        # - delay: 00:00:02
        - service: script.light_switch
          data:
            entity_id: light.bedroom_ceiling
  - choose:
    - conditions:
      - condition: state
        entity_id: light.bedroom_bed
        state: 'on'
      sequence:
        # - delay: 00:00:02
        - service: script.light_switch
          data:
            entity_id: light.bedroom_bed



# Light Toggle
light_toggle:
  alias: Light - Toggle
  icon: "mdi:party-popper"
  description: 'Toggle the light'
  fields:
    entity_id:
      description: The Light to be toggled.
      example: light.livingroom
  mode: parallel
  sequence:
  - service: >
      {% if states(entity_id) =="off" %}
        script.light_on
      {% else %}
        light.turn_off
      {% endif %}
    data:
      entity_id: "{{ entity_id}}"


# Alarm
lights_wake_up:
  alias: Lights - Alarm Gradiant
  icon: mdi:alarm
  description: Turn on Light with a timer
  fields:
    light:
      description: The light to be turned on
      example: light.bedroom
  mode: restart
  sequence:
    - service: switch.turn_on
      data:
        entity_id: switch.ha_lights_mode_morning
    - delay:
        seconds: 5
    - service: script.light_on
      data:
        entity_id: "{{ light }}"
    - delay:
        seconds: 5
    - service: light.turn_on
      data:
        entity_id: "{{ light }}"
        brightness_pct: '1'
    # - delay:
    #     seconds: 5
    - service: script.notify
      data:
        title: Alarm
        message: Wake up light is now {{ states(light) }}, on duration is {{states('input_number.alarm') | int}} minutes.
    - repeat:
        while:
          - condition: template
            value_template: "{{ is_state(light, 'on') }}"
          - condition: template
            value_template: "{{ state_attr(light, 'brightness') < 250 }}"
        sequence:
          - delay: "{{ float( states('input_number.alarm') ) * 60 / 100 * 5}}"
          - service: light.turn_on
            data:
              entity_id: "{{ light }}"
              brightness_step_pct: '5'
          # - service: notify.telegram_arnav
          #   data:
          #     title: Alarm
          #     message: Light is {{ states(light) }}, with brightness {{ state_attr(light, 'brightness') }}



# Set alarm
set_pre_alarm:
  alias: Set next alarm trigger
  description: Set light trigger 30 minutes before next alarm
  mode: single
  sequence:
    - service: input_datetime.set_datetime
      data:
        entity_id: input_datetime.next_alarm_light
        timestamp: "{{ state_attr('input_datetime.next_alarm', 'timestamp') | int - (states('input_number.alarm')| int) *60 | int}}"

set_alarm:
  alias: Set next alarm trigger
  description: Reviews next alarm and sets the first one ocurring as next alarm
  mode: restart
  sequence:
    - service: input_datetime.set_datetime
      data:
        entity_id: input_datetime.next_alarm_temp
        timestamp: "{{ as_timestamp(now()) + 7.5 * (24*60*60) | int}}"
    - delay:
        seconds: 1
    - service: input_datetime.set_datetime
      data:
        entity_id: input_datetime.next_alarm_temp
        timestamp: "{{ as_timestamp(now()) + 7.5 * (24*60*60) | int}}"
    - delay:
        seconds: 1
    # Manual
    - choose:
      - conditions:
        - condition: template
          value_template: "{{ as_timestamp(now()) <
                              as_timestamp(states('input_datetime.next_alarm_manual')) <
                              as_timestamp(states('input_datetime.next_alarm_temp')) }}"
        sequence:
        - service: input_datetime.set_datetime
          data:
            entity_id: input_datetime.next_alarm_temp
            timestamp: "{{ as_timestamp(states('input_datetime.next_alarm_manual')) | int}}"
        - delay:
            seconds: 1
        - service: input_datetime.set_datetime
          data:
            entity_id: input_datetime.next_alarm_temp
            timestamp: "{{ as_timestamp(states('input_datetime.next_alarm_manual')) | int}}"
    # ZR
    - choose:
      - conditions:
        - condition: template
          value_template: "{{ as_timestamp(now()) <
                              as_timestamp(states('input_datetime.next_alarm_zr')) <
                              as_timestamp(states('input_datetime.next_alarm_temp')) }}"
        sequence:
        - service: input_datetime.set_datetime
          data:
            entity_id: input_datetime.next_alarm_temp
            timestamp: "{{ as_timestamp(states('input_datetime.next_alarm_zr')) | int}}"
        - delay:
            seconds: 1
        - service: input_datetime.set_datetime
          data:
            entity_id: input_datetime.next_alarm_temp
            timestamp: "{{ as_timestamp(states('input_datetime.next_alarm_zr')) | int}}"
    # A3
    - choose:
      - conditions:
        - condition: template
          value_template: "{{ as_timestamp(now()) <
                              as_timestamp(states('input_datetime.next_alarm_a3')) <
                              as_timestamp(states('input_datetime.next_alarm_temp')) }}"
        sequence:
        - service: input_datetime.set_datetime
          data:
            entity_id: input_datetime.next_alarm_temp
            timestamp: "{{ as_timestamp(states('input_datetime.next_alarm_a3')) | int}}"
        - delay:
            seconds: 1
        - service: input_datetime.set_datetime
          data:
            entity_id: input_datetime.next_alarm_temp
            timestamp: "{{ as_timestamp(states('input_datetime.next_alarm_a3')) | int}}"
    # G6
    - choose:
      - conditions:
        - condition: template
          value_template: "{{ as_timestamp(now()) <
                              as_timestamp(states('input_datetime.next_alarm_g6')) <
                              as_timestamp(states('input_datetime.next_alarm_temp')) }}"
        sequence:
        - service: input_datetime.set_datetime
          data:
            entity_id: input_datetime.next_alarm_temp
            timestamp: "{{ as_timestamp(states('input_datetime.next_alarm_g6')) | int}}"
        - delay:
            seconds: 1
        - service: input_datetime.set_datetime
          data:
            entity_id: input_datetime.next_alarm_temp
            timestamp: "{{ as_timestamp(states('input_datetime.next_alarm_g6')) | int}}"
    - service: input_datetime.set_datetime
      data:
        entity_id: input_datetime.next_alarm
        timestamp: "{{ as_timestamp(states('input_datetime.next_alarm_temp')) | int}}"
    - delay:
        seconds: 1
    - service: input_datetime.set_datetime
      data:
        entity_id: input_datetime.next_alarm
        timestamp: "{{ as_timestamp(states('input_datetime.next_alarm_temp')) | int}}"



# Notification
notify:
  alias: Notify
  icon: mdi:bell-badge
  description: Send notification
  fields:
    title:
      description: The title of the message
      example: Title
    message:
      description: The body of the message
      example: Body text
  mode: queued
  sequence:
    - service: notify.notify
      data:
        title: "{{ title }}"
        message: "{{ message }}"
    - service: notify.telegram_arnav
      data:
        title: "{{ title }}"
        message: "{{ message }}"



# Disco Light
disco_light:
  alias: Disco Light
  # icon: mdi:bell-badge
  description: Change Colour of selected light
  fields:
    entity_id:
      description: The entity_id of the light to be changed
      example: light.livingroom
    transition:
      description: Time for transition (s)
      example: "5"
  mode: queued
  sequence:
    service: light.turn_on
    data:
      entity_id: "{{ entity_id }}"
      hs_color:
        - "{{ range(360)|random }}"
        - "{{ range(80,101)|random }}"
        # brightness_pct: 100
      transition: "{{ transition }}"



# Set light
set_light_mode:
  alias: Set Light Mode
  description: Set light mode based on time and sun
  mode: single
  sequence:
    - choose:
      - conditions: "{{ now().hour < 6 and is_state('sun.sun', 'below_horizon') }}"
        sequence:
          - alias: "Mode night"
            service: switch.turn_on
            target:
              entity_id: switch.ha_lights_mode_night

      - conditions: "{{ now().hour < 18 and is_state('sun.sun', 'above_horizon') }}"
        sequence:
          - alias: "Mode daytime"
            service: switch.turn_on
            target:
              entity_id: switch.ha_lights_mode_morning

      - conditions: "{{ now().hour < 18 and is_state('sun.sun', 'below_horizon') }}"
        sequence:
          - alias: "Mode early sunset"
            service: switch.turn_on
            target:
              entity_id: switch.ha_lights_mode_afternoon
      - conditions: "{{ now().hour < 21 and is_state('sun.sun', 'above_horizon') }}"
        sequence:
          - alias: "Mode afternoon"
            service: switch.turn_on
            target:
              entity_id: switch.ha_lights_mode_afternoon

      - conditions: "{{ now().hour < 21 and is_state('sun.sun', 'below_horizon') }}"
        sequence:
          - alias: "Mode late sunset"
            service: switch.turn_on
            target:
              entity_id: switch.ha_lights_mode_evening
      - conditions: "{{ now().hour < 23 }}"
        sequence:
          - alias: "Mode evening"
            service: switch.turn_on
            target:
              entity_id: switch.ha_lights_mode_evening

      default:
        - alias: "Night"
          service: switch.turn_on
          target:
            entity_id: switch.ha_lights_mode_night
